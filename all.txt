Graph graphGlob, graphGlob2;
Node nodeGlob,ee,ttt;
OArc arcGlob;
int result;


int max(int a, int b){
	int result;
	if(a>b) {result = a;}
	else {result = b;}
	return result;
}


Node getMaxNodeWeight(Graph graphGlob){
	Node answer;
	answer="answer node";
	
	int a;
	a = max(156,257);
	return answer;
}











main{
Graph graphGlob;
Node nodeGlob;
OArc arcGlob;
	Text t;
	if(15==15){
	}
	
	// init var
	Graph graphLoc, graph;
	Node nodeLoc;
	OArc arcLoc;
	graphLoc="First Graph";
	graphGlob="Second Graph";
	nodeLoc="First Node";
	nodeGlob="Second Node";
	arcLoc="First Arc";
	arcGlob="Second Arc";
	
	graphLoc=graphGlob;
	nodeLoc=nodeGlob;
	arcGlob=arcLoc;
	
	// set arc vertex
	arcLoc=(nodeLoc->nodeGlob); 

	
	// сокращённые и полные формы записи
	graphLoc+=nodeLoc; //Add node to graph
	graphGlob+=graphLoc;
	graphLoc+=arcLoc; // Add arc to graph;
	graphLoc-=nodeLoc;
	graphLoc-=graphGlob;
	graphLoc-=arcLoc;
	Text a;
	a+="sdfsdfsf";
	int ttt1;
	
	
	
	nodeLoc = arcLoc.getFirst();
	nodeLoc = arcGlob.getSecond();
	nodeLoc = arcLoc.getFirst();
	
	
	// операции для проверки принадлежности например : узел графу
	
	if(graphLoc.containNode(nodeLoc)==true || graphLoc.containArc(arcLoc)==true){
		//do smth
	}
	
	
	//scan(graphGlob);
	//scan(nodeLoc);
	//scan(arcLoc);
	
	write("About First graph/n");
	printGraph(graphLoc); // add a variety of output options ???
	write("About First Node/n");
	printNode(nodeLoc);
	write("About First Arc/n");
	printArc(arcLoc);
	
	
	graphLoc = ({a,b,c},{a->b});
	
	write(graphLoc.name());
	write(nodeLoc.name());
	write(arcLoc.name());
	Text text;
	read(text);
	nodeLoc=text;
	graphLoc=text;
	arcGlob=text;
	
	int size;
	Node aNode;
	size=graph.nodeNumber();
	size=graph.arcNumber();
	size=aNode.IOArcNumber();
	size=aNode.IArcNumber();
	size=aNode.OArcNumber();
	write(size.toText());
	
	OArc aArc;
	foreach(aNode; graphLoc;input){
		// do smth
		printNode(aNode);
	}
	foreach(aArc; nodeLoc; input){
		// do smth
		printArc(aArc);
	}
	foreach(aArc; nodeLoc;){
		// do smth
		printArc(aArc);
	}
	int i,end;
	for(i;5;graph.nodeNumber())     {
	}
	
	bool find;
	find=false;
	Node tNode;
	while(graph.nodeNumber()<25){
		
		graph+=tNode;
	}
	
	
	//Node tNode;
	do{
		
		graph+=tNode;
	}
	while(graph.nodeNumber()<25);
	
	if(graph.nodeNumber()==10){
		printGraph(graph);
	}
	else{
		write("message");
		graph+=nodeLoc;
	}	
	
	graphLoc.clearMarks();
	graphLoc.markNode(nodeLoc);
	graphLoc.unmarkNode(nodeLoc);
	nodeLoc = graph.getNode(nodeLoc);
	
	if(nodeLoc.isMark()==true){
		write("marked");
	}
	float f;
	f = 18.0/25.0+ 1.0-(15.0+2.0)*3.0;
	int res;
	res = max(151,15);
}