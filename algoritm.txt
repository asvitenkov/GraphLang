// алгоритм поиска минимального пути между указанными вершинами

Node beginNode,endNode;
int answer;

int searchNext(Node curNode,int size){
	if(curNode==endNode){
		if(size<answer){
			answer = size;
		}
	}
	OArc aArc;
	Node tNode;
	int temp;
	int tSize;
	foreach(aArc; curNode; output){
		tNode = aArc.getSecond();
		if(tNode.isMark()==false){
			tNode.markNode();
			temp=size+1;
			tSize = searchNext(tNode, temp);
			tNode.unmarkNode();
		}
	}
	return tSize;
}

main{
	Graph g;
	beginNode = "begin";
	endNode = "end";
	g=({v1,v2,v3},{v1->v2,v2->v3});
	answer = 999999;
	searchNext(beginNode,0);
	if(answer!=999999){
		write(answer);
	}
	else{
		write("way does not exist");
	}
	
}