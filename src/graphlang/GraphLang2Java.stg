group Java;

MyGlobalVariableDeclaration(list)::= <<
<list:{n|private <n>}>
>>



test(type, list)::= <<
<type> <list:{n|myVAR_<n>};separator=";">
>>

print(value)::= <<
<value>
>>



MyVariableDeclarators(type,list,additionPart)::= <<
<type> <list:{n| ___<n><additionPart>};separator=",">;

>>


MyFunctionDeclaration(returnType,name,argumentList, statements, retSt)::=<<
<returnType> <name>(<argumentList;separator=",">){
  <statements>
  <retSt>
}


>>
 


MyMainBlock(globalExpression, mainBlock) ::= <<

import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;


import antlr.RecognitionException;

import graphlib.*;


public class GraphLangProgram {

  private ArrayList\<String\> listForSGOVar;
  private ArrayList\<String\> listForSGOFirstV; 
  private ArrayList\<String\> listForSGOSecondV;
  private Scanner __in;
  
  <globalExpression>
  
  public void run() throws Exception{
    <mainBlock>
  }
  {
    __in = new Scanner(System.in);
  }
  
  
    public static void main(String[] args) {
    GraphLangProgram pr = new GraphLangProgram();
    try {
    pr.run();
  } catch (Exception e) {
    e.printStackTrace();
  }
  }
  
}
>>

MyWhileStatement(logicalExpr,block)::=<<
while(<logicalExpr>){
  <block>}

>>

MyDoWhileStatement(logicalExpr,block)::=<<
do{
  <block>}  while(<logicalExpr>);
  

>>


MyForControl(expr,block)::= <<

<expr>{
  <block>
}

>>

MyCreateIteratorStatement(itType,var,itVar,iterator,randNumber)::= <<

<itType> it_<var><randNumber> = <itVar>.<iterator>();
//<var> = it_<var><randNumber>.currentItem();
for(it_<var><randNumber>.first();!it_<var><randNumber>.isDone();it_<var><randNumber>.next()){
<var>=it_<var><randNumber>.currentItem();

>>

MyForeachStatment(expr,block)::=<<
<expr>
  <block>
}

>>


MySetGraphOperation(idGraph,var,fV,sV)::= <<

// set graph operation
listForSGOVar = new ArrayList\<String\>();
listForSGOFirstV = new ArrayList\<String\>();
listForSGOSecondV = new ArrayList\<String\>();
<var:{n|listForSGOVar.add("<n>")};separator=";\n">;
<fV:{n|listForSGOFirstV.add("<n>")};separator=";\n">;
<sV:{n|listForSGOSecondV.add("<n>")};separator=";\n">;
___<idGraph>.setGraph(listForSGOVar,listForSGOFirstV,listForSGOSecondV)
>>




MyAssignmentOperation(id,operator,mathExpr,additionExpr)::= <<
___<id><operator><mathExpr><additionExpr>;

>>



MyIfStatement(logicalExpr,blockIf,blockElse)::=<<
if(<logicalExpr>){
  <blockIf>}
else{
  <blockElse>}

>>

MyForStatement(var,begin,end)::=<<
for(<var>=<begin>;<var>\<<end>;<var>++)
>>


