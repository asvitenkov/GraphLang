group Java;

program(globals,functions) ::= <<
class Wrapper {
    <globals; separator="\n">
    <functions; separator="\n">
}
>>

variable(type,name) ::= "<type> <name>;"

globalVariable ::= variable

function(type,name,args,locals,stats) ::= <<
<type> <name>(<args; separator=", ">) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

type_int() ::= "int"

type_char() ::= "char"

type_user_object(name) ::= "<name>"

parameter(type,name) ::= "<type> <name>"

statement(expr) ::= "<expr>;"

statementList(locals,stats) ::= <<
{
    <locals; separator="\n">
    <stats; separator="\n">
}<\n>
>>

forLoop(e1,e2,e3,locals,stats) ::= <<
for (<e1> <e2>; <e3>) {
    <locals; separator="\n">
    <stats; separator="\n">
}
>>

assign(lhs,rhs) ::= "<lhs> = <rhs>;"

equals(left,right) ::= "<left> == <right>"

lessThan(left,right) ::= "<left> \< <right>"

add(left,right) ::= "<left> + <right>"

refVar(id) ::= "<id>"

iconst(value) ::= "<value>"





MyGlobalVariableDeclaration(list)::= <<
<list:{n|private <n>}>
>>



print(value)::= <<
<value>
>>



MyVariableDeclarators(type,list)::= <<
<type> <list:{n| <n>};separator=",">;

>>


MyFunctionDeclaration(returnType,name,argumentList, statements, retSt)::=<<
<returnType> <name>(<argumentList;separator=",">){
function body

<statements>


<retSt>
}

>>
 


MyMainBlock(globalExpression, mainBlock) ::= <<


private ArrayList\<String\> listForSGOVar;
private ArrayList\<String\> listForSGOFirstV; 
private ArrayList\<String\> listForSGOSecondV;


public class GraphLangProgram {
  <globalExpression>
  
  public static void main() throws IOException, RecognitionException{
    <mainBlock>
  }
}
>>



MyForControl()::= <<
for control

>>




MySetGraphOperation(idGraph,var,fV,sV)::= <<
listForSGOVar = new ArrayList\<String\>;
listForSGOFirstV = new ArrayList\<String\>;
listForSGOSecondV = new ArrayList\<String\>;
<var:{n|listForSGOVar.add("<n>")};separator=";\n">;
<fV:{n|listForSGOFirstV.add("<n>")};separator=";\n">;
<sV:{n|listForSGOSecondV.add("<n>")};separator=";\n">;
<idGraph>.setGraph(listForSGOVar,listForSGOFirstV,listForSGOSecondV)
>>




MyAssignmentOperation(id,operator,mathExpr)::= <<
<id><operator><mathExpr>;

>>



MyIfStatement(logicalExpr,blockIf,blockElse)::=<<
if(<logicalExpr>){
  <blockIf>}
else{
  <blockElse>}

>>



test() ::=  <<
test

>>


testCCM() ::=  <<
CCM
>>

testCIF() ::=  <<
CIF
>>



testME() ::=  <<
MathExpr

>>
